// Swarm - Special renderer that draws a swarm of swirling/crawling lines.
// https://github.com/keijiro/Swarm

#pragma kernel SwirlingUpdate
#pragma kernel SwirlingReconstruct

#include "UnityCG.cginc"
#include "SimplexNoise3D.cginc"

RWStructuredBuffer<float4> PositionBuffer;
RWStructuredBuffer<float4> TangentBuffer;
RWStructuredBuffer<float4> NormalBuffer;

StructuredBuffer<float4> PositionBufferRO;

// Distance field volume (gradient.xyz, distance)
Texture3D<float4> DFVolume;
SamplerState samplerDFVolume;

CBUFFER_START(Params)
    uint InstanceCount;
    uint HistoryLength;
    uint RandomSeed;
    float Spread;
    float StepWidth;
    float NoiseFrequency;
    float3 NoiseOffset;
    float Constraint;
CBUFFER_END

// Hash function from H. Schechter & R. Bridson, goo.gl/RXiKaH
uint Hash(uint s)
{
    s ^= 2747636419u;
    s *= 2654435769u;
    s ^= s >> 16;
    s *= 2654435769u;
    s ^= s >> 16;
    s *= 2654435769u;
    return s;
}

float Random(uint seed)
{
    return float(Hash(seed ^ RandomSeed)) / 4294967295.0; // 2^32-1
}

// Nearly uniformly distributed random vector in the unit sphere.
float3 RandomPoint(uint id)
{
    id *= 64;
    float u = Random(id + 0) * UNITY_PI * 2;
    float z = Random(id + 1) * 2 - 1;
    float l = Random(id + 2);
    return float3(float2(cos(u), sin(u)) * sqrt(1 - z * z), z) * sqrt(l);
}

float4 SampleVolume(float3 p)
{
    return DFVolume.SampleLevel(samplerDFVolume, p + 0.5, 0);
}

// Search the distance field randomly and get the minimum distance point.
float3 RandomSpawnPoint(uint id)
{
    const uint kSearchIteration = 24;

    id *= 64;

    // The original spawn point. Use this when Constraint == 0.
    float3 p0 = RandomPoint(id) * Spread;

    // Search the distance field randomly.
    float3 p_min = p0;
    float d_min = SampleVolume(p0).w;

    for (uint i = 1; i < kSearchIteration; i++)
    {
        float3 p = RandomPoint(id + i) * Spread;
        float d = SampleVolume(p).w;

        if (d < d_min)
        {
            p_min = p;
            d_min = d;
        }
    }

    return lerp(p0, p_min, Constraint);
}

[numthreads(64, 1, 1)]
void SwirlingUpdate(uint id : SV_DispatchThreadID)
{
    // Determine the first point.
    float3 p = RandomSpawnPoint(id);
    PositionBuffer[id] = float4(p, 0);

    for (uint i = 1; i < HistoryLength; i++)
    {
        // Divergence-free noise field.
        float4 sn1 = snoise(98.4898 + p * NoiseFrequency + NoiseOffset);
        float4 sn2 = snoise( 1.2278 - p * NoiseFrequency + NoiseOffset);

        // Apply the boundary condition (distance field) to the first noise field.
        float4 df = SampleVolume(p);
        sn1.xyz = lerp(sn1.xyz, sn1.xyz * saturate(df.w) + df.xyz, Constraint);

        // Move and store the point.
        p += cross(sn1.xyz, sn2.xyz) * StepWidth;
        PositionBuffer[id + i * InstanceCount] = float4(p, 0);
    }
}

[numthreads(64, 1, 1)]
void SwirlingReconstruct(uint id : SV_DispatchThreadID)
{
    // Reconstruct the first point.
    float3 p0 = PositionBufferRO[id].xyz;
    float3 p1 = PositionBufferRO[id + InstanceCount].xyz;

    float3 t0 = normalize(p1 - p0);
    float3 b0 = cross(t0, normalize(p0));
    float3 n0 = cross(b0, t0);

    TangentBuffer[id] = float4(t0, 0);
    NormalBuffer[id] = float4(n0, 0);

    // Sequentially reconstruct the points excepting the last one.
    for (uint i = 1; i < HistoryLength - 1; i++)
    {
        uint index = id + i * InstanceCount;

        float3 p0 = PositionBufferRO[index - InstanceCount].xyz;
        float3 p2 = PositionBufferRO[index + InstanceCount].xyz;

        float3 t1 = normalize(p2 - p0);
        float3 n1 = normalize(cross(b0, t1));

        TangentBuffer[index] = float4(t1, 0);
        NormalBuffer[index] = float4(n1, 0);

        b0 = cross(t1, n1);
    }

    // Reconstruct the last point.
    uint index = id + (HistoryLength - 1) * InstanceCount;

    p0 = PositionBufferRO[index - InstanceCount].xyz;
    p1 = PositionBufferRO[index].xyz;

    float3 t1 = normalize(p1 - p0);
    float3 n1 = normalize(cross(b0, t1));

    TangentBuffer[index] = float4(t1, 0);
    NormalBuffer[index] = float4(n1, 0);
}
